In-shop anomaly detection for retails
=========================================

This use case study is for retail stores to detect abnormal energy consumption in real-time.
As illustrated in the followign picture, a retail company has a large number of shops distributed in different locations. 
For each shop, a Raspberry Pi device (edge node) is deployed to monitor the power consumption from all PowerPanels 
in the shop. Once an abnormal power usage is detected on the edge, 
the alarm mechanism in the shop is triggered to inform the shop owner. 
Moreover, the detected event is reported to the cloud for information aggregation. 
The aggregated information is then presented to the system operator via a dashboard service. 
In addition, the system operator can dynamically update the rule for anomaly detection.


.. figure:: figures/retails.png
   :scale: 100 %
   :alt: map to buried treasure


Designed processing flow
----------------------------

In this section, we discuss our implementation of an example application which realizes the first use case (described in Sec.~\ref{SmartCityUseCasesSubsection}): anomaly detection of energy consumption in retail stores. The service topology (illustrated in Fig.~\ref{fig:anomaly-detection}) is defined to meet the requirements of the use case. Two data processing operators are defined as follows:

* Anomaly Detector: This operator is to detect anomaly events based on the collected data from power panels in a retail store. It has two types of inputs: 
	* detection rules, which are provided and updated by the operator; The detection rules input stream type is associated with ``broadcast``, meaning that the rules are needed by all task instances of this operator. The granularity of this operator is based on ``shopID``, meaning that a dedicated task instance will be created and configured for each shop. 
	
	* sensor data from power panel

* Counter: This operator is to count the total number of anomaly events for all shops in each city. Therefore, its task granularity is by ``city``. Its input stream type is the output stream type of the previous operator (Anomaly Detector). 

There are two types of result consumers: (1) a dashboard service in the cloud, which subscribes to the final aggregation results generated by the counter operator for the global scope; (2) the alarm in each shop, which subscribes to the anomaly events generated by the Anomaly Detector task on the local edge node in the retail store. 

.. figure:: figures/retail-flow.png
   :scale: 100 %
   :alt: map to buried treasure


Specified service topology
----------------------------

Using the grahical editor provided by FogFlow task designer, 
we define the following service topology for this use case. 

.. figure:: figures/retail-topology.png
   :scale: 100 %
   :alt: map to buried treasure